using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Security;
using CampusWebSotre.Models;
using CampusWebSotre.Utils;
using CampusWebStore.Business.Services;
using CampusWebStore.Shared;
using CampusWebStore.Shared.Models;
using Microsoft.Practices.Unity;

namespace CampusWebSotre.Controllers
{
    [Authorize]
    public class AccountController : WebController
    {

        #region "Properties"

        [Dependency]
        public IAccountSettingsService AccountSettingsService { get; set; }

        [Dependency]
        public IOrderService OrderService { get; set; }

        #endregion

        //
        // GET: /Account/LogOn

        [AllowAnonymous]
        public ActionResult LogOn()
        {
            if (Session["USERINFO"] != null)
            {
                return RedirectToAction("MyAccount");
            }

            return ContextDependentView();
        }

        //
        // POST: /Account/JsonLogOn
        [AllowAnonymous]
        [HttpPost]
        public JsonResult JsonLogOn(LogOnModel model, string returnUrl)
        {
            if (ModelState.IsValid)
            {
                if (Membership.ValidateUser(model.UserName, model.Password))
                {
                    FormsAuthentication.SetAuthCookie(model.UserName, model.RememberMe);
                    return Json(new { success = true, redirect = returnUrl });
                }
                else
                {
                    ModelState.AddModelError("", "The user name or password provided is incorrect.");
                }
            }

            // If we got this far, something failed
            return Json(new { errors = GetErrorsFromModelState() });
        }

        //
        // POST: /Account/LogOn

        [AllowAnonymous]
        [HttpPost]
        public ActionResult LogOn(LogOnModel model, string ReturnUrl)
        {
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                ReturnUrl = Request.QueryString["ReturnUrl"] ?? string.Empty;
            }

            if (ModelState.IsValid)
            {
                //Check user valid and do login..
                var objUserModel = AccountSettingsService.ValidUser(StoreNumber, model.UserName,
                                                                    model.Password, UvUsername, UvPassword,
                                                                    DbType, UvAddress, UvAccount, CacheTime, CacheTime,
                                                                    Strd3PortNumber, UseEncryption, Strd3PortNumber);


                if (!string.IsNullOrEmpty(objUserModel.ErrorMsg))
                {
                    ModelState.AddModelError("", objUserModel.ErrorMsg);
                }
                else
                {
                    //Set Session to place user information...
                    Session["USERINFO"] = objUserModel;

                    Session["ACCTYPE"] = objUserModel.Type;

                    if (Url.IsLocalUrl(ReturnUrl))
                    {
                        return Redirect(ReturnUrl);
                    }
                  
                    return RedirectToAction("MyAccount");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        /// <summary>
        /// GET: /Account/Logout
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult LogOut()
        {
            Session["USERINFO"] = null;

            Session["CartItem"] = null;

            Session["ACCTYPE"] = null;

            //Master.HideLogout();
            //Master.DisplayUser();
            //Master.CalcCartTotal();
            Session.Clear();

            return View();
        }

        //
        // GET: /Account/LogOff

        public ActionResult LogOff()
        {
            FormsAuthentication.SignOut();

            return RedirectToAction("Index", "Home");
        }

        /// <summary>
        /// GET: /Account/MyAccount
        /// Dashboard of Logged in user..
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult MyAccount()
        {
            if (Session["USERINFO"] == null)
            {
                return RedirectToAction("LogOn");
            }

            return ContextDependentView(); 
        }

        /// <summary>
        /// Get : /Account/AccountDetails
        /// Show user details
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult AccountDetails()
        {
            if (Session["USERINFO"] == null)
            {
                return RedirectToAction("LogOn");
            }

            var objUserModel = (UserModel) Session["USERINFO"];

            var objAccountSettingModel = new AccountSettingsViewModel
                                             {
                                                 UserName = objUserModel.UserName,
                                                 FirstName = objUserModel.FirstName,
                                                 LastName = objUserModel.LastName,
                                                 Address = objUserModel.Address,
                                                 Address2 = objUserModel.Address2,
                                                 City = objUserModel.City,
                                                 State = objUserModel.State,
                                                 Zip = objUserModel.Zip,
                                                 Country = objUserModel.Country,
                                                 Email = objUserModel.Email,
                                                 DayPhone = objUserModel.DayPhone,
                                                 Evening = objUserModel.Evening,
                                                 ShipToName = objUserModel.ShipToName,
                                                 ShipAddress = objUserModel.ShipAddress,
                                                 ShipAddress2 = objUserModel.ShipAddress2,
                                                 ShipCity = objUserModel.ShipCity,
                                                 ShipState = objUserModel.ShipState,
                                                 ShipZip = objUserModel.ShipZip,
                                                 ShipCountry = objUserModel.ShipCountry,
                                                 ShipInstruc = objUserModel.ShipInstruc,
                                                 IsEmailOptIn = objUserModel.EmailOptIn == "Y"
                                             };


            return View(objAccountSettingModel); 
        }

        /// <summary>
        /// Update User details..
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost]
        public ActionResult AccountDetails(AccountSettingsViewModel model)
        {
              var emailoptin =model.IsEmailOptIn?"Y":"N";

            
             if (ModelState.IsValid)
             {
                 //Update the user details
                 var objUserModel = AccountSettingsService.UpdateUser(StoreNumber, model.UserName,
                                                                      model.FirstName, model.LastName, model.Address,
                                                                      model.Address2,
                                                                      model.City, model.State, model.Zip, model.Country,
                                                                      model.Email, model.DayPhone, model.Evening,
                                                                      model.ShipToName,
                                                                      model.ShipAddress, model.ShipAddress2,
                                                                      model.ShipCity,
                                                                      model.ShipState, model.ShipZip, model.ShipCountry,
                                                                      model.ShipInstruc, emailoptin,"", UvUsername,
                                                                      UvPassword, DbType, UvAddress, UvAccount,
                                                                      CacheTime, CacheTime,
                                                                      Strd3PortNumber, UseEncryption, Strd3PortNumber);

                 if (!string.IsNullOrEmpty(objUserModel.ErrorMsg))
                 {
                     ModelState.AddModelError("", objUserModel.ErrorMsg);
                 }
                 else
                 {
                     Session["USERINFO"] = objUserModel;

                     return RedirectToAction("MyAccount");
                 }
             }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

      
        /// <summary>
        /// To Change user password
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost]
        public JsonResult JsonChangePassword()
        {
            var username = Convert.ToString(Request["UserName"]);

            var oldPassword = Convert.ToString(Request["OldPassword"]);

            var newPassword = Convert.ToString(Request["NewPassword"]);

            var isChanged = AccountSettingsService.ChangePassword(StoreNumber, username, oldPassword, newPassword, UvUsername,
                                                  UvPassword, DbType, UvAddress, UvAccount, CacheTime, CacheTime,
                                                  Strd3PortNumber, UseEncryption, Strd3PortNumber);


            return Json(new {success = isChanged});
        }

        /// <summary>
        /// Get : /Account/OrderHistory
        /// Show user details
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult OrderHistory()
        {
            if (Session["USERINFO"] == null)
            {
                return RedirectToAction("LogOn");
            }

            var userid = "MAX";  /*((UserModel) Session["USERINFO"]).UserName;*/

            ViewBag.UserId = userid;

            var orderModels = OrderService.GetOrderHistory(StoreNumber, userid, UvUsername,
                                                           UvPassword, DbType, UvAddress, UvAccount, CacheTime,
                                                           CacheTime, Strd3PortNumber, UseEncryption, Strd3PortNumber);

            var orderViewModels = (from order in orderModels
                                   select new OrderViewModel
                                              {
                                                  OrderId = order.OrderId,
                                                  UserId = order.UserId,
                                                  ConfNumber = order.ConfNumber,
                                                  DatePlaced = order.DatePlaced,
                                                  DateProcessed = order.DateProcessed,
                                                  Status = order.Status,
                                                  Amount = order.Amount
                                              });

            return View(orderViewModels);
        }


        /// <summary>
        /// Get the customer detail
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult JsonGetOrderDetail()
        {
            var orderId = Request["OrderId"];

            var customerId = Request["CustomerId"];

            //Get the order detail for the customer
            var orderDetail = OrderService.GetOrderDetail(StoreNumber, customerId, orderId, UvUsername,
                                                          UvPassword, DbType, UvAddress, UvAccount, CacheTime,
                                                          CacheTime, Strd3PortNumber, UseEncryption, Strd3PortNumber);

            var orderDetailViewModel = new OrderDetailViewModel
            {
                Address1 = orderDetail.Address1,
                Address2 = orderDetail.Address2,
                City = orderDetail.City,
                Country = orderDetail.Country,
                Frieght = orderDetail.Freight,
                FrieghtType = orderDetail.FreightType,
                GiftCard = orderDetail.GiftCard,
                Name = orderDetail.Name,
                OrderDate = orderDetail.OrderDate,
                OrderId = orderDetail.OrderId,
                ShipToName = orderDetail.ShipToName,
                ShipAddress1 = orderDetail.ShipAddress1,
                ShipAddress2 = orderDetail.ShipAddress2,
                PromoCode = orderDetail.PromoCode,
                ShipCity = orderDetail.ShipCity,
                ShipCountry = orderDetail.ShipCountry,
                ShipMethod = orderDetail.ShipMethod,
                ShipState = orderDetail.ShipState,
                ShipZip = orderDetail.ShipZip,
                Status = orderDetail.Status,
                StatusDate = orderDetail.StatusDate,
                SubTotal = orderDetail.SubTotal,
                Tax = orderDetail.Tax,
                Total = orderDetail.Total,
                UserId = orderDetail.UserId,
                Zip = orderDetail.Zip,
                OrderItemDetail = (from item in orderDetail.OrderItemDetail
                                   select new OrderItemDetailViewModel
                                   {
                                       Title = item.Title,
                                       EbookUrl = item.EbookInfo,
                                       EbookInfo = item.EbookInfo,
                                       Author = item.Author,
                                       ExtPrice = item.ExtPrice,
                                       Memo = item.Memo,
                                       Price = item.Price,
                                       Qty = item.Qty,
                                       Type = item.Type
                                   }).ToList()

            };

            return PartialView("EditorTemplates/ShowOrderDetails", orderDetailViewModel);
        }

        /// <summary>
        /// GET: /Account/ForgotPassword
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult ForgotPassword()
        {


            return View();
        }

        /// <summary>
        /// To send reset password to user... 
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost]
        public JsonResult JsonForgotPassword()
        {
            var username = Request["UserName"];

            var newpassword = PasswordGeneratorUtil.Generate();


            var email = AccountSettingsService.ResetPassword(StoreNumber, username,newpassword, UvUsername,
                                                                   UvPassword, DbType, UvAddress, UvAccount, CacheTime,
                                                                   CacheTime, Strd3PortNumber, UseEncryption,
                                                                   Strd3PortNumber);

            if (email.Contains("@"))
            {
                var msg = string.Empty;

                msg += "Your password has been reset. Your new password is:" + newpassword + "<br>";

                msg += "Please visit the website and login with this new password. You can then change your password after you log in.";
                
                var objEmaulUtil = new EmailUtil();

                if (!objEmaulUtil.Send(email, "Password Information", msg))
                {
                    return Json(new { success = false, errorMsg = "Password has been reset but message could not be sent." });
                }
            }
            else
            {
                return Json(new {success = false, errorMsg = email});
            }

            return Json(new {success = true});
        }

        //
        // GET: /Account/Register

        [AllowAnonymous]
        public ActionResult Register()
        {
            return ContextDependentView();
        }

        //
        // POST: /Account/JsonRegister

        [AllowAnonymous]
        [HttpPost]
        public ActionResult JsonRegister(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                MembershipCreateStatus createStatus;
                Membership.CreateUser(model.UserName, model.Password, model.Email, null, null, true, null, out createStatus);

                if (createStatus == MembershipCreateStatus.Success)
                {
                    FormsAuthentication.SetAuthCookie(model.UserName, createPersistentCookie: false);
                    return Json(new { success = true });
                }
                else
                {
                    ModelState.AddModelError("", ErrorCodeToString(createStatus));
                }
            }

            // If we got this far, something failed
            return Json(new { errors = GetErrorsFromModelState() });
        }

        //
        // POST: /Account/Register

        [AllowAnonymous]
        [HttpPost]
        public ActionResult Register(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                MembershipCreateStatus createStatus;
                Membership.CreateUser(model.UserName, model.Password, model.Email, null, null, true, null, out createStatus);

                if (createStatus == MembershipCreateStatus.Success)
                {
                    FormsAuthentication.SetAuthCookie(model.UserName, createPersistentCookie: false);
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    ModelState.AddModelError("", ErrorCodeToString(createStatus));
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        /// <summary>
        /// Get: /Account/CreateNewUser
        /// To create new user.
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult CreateNewUser()
        {

            return View();
        }

        /// <summary>
        /// Save new user details....
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost]
        public ActionResult CreateNewUser(AccountSettingsViewModel model)
        {
            const string emailoptin = "Y";

            if (ModelState.IsValid)
            {
                var objUserModel = AccountSettingsService.AddUser(StoreNumber, model.UserName, model.Password, model.FirstName,
                                                model.LastName, model.Address, model.Address2,
                                                model.City, model.State, model.Zip, model.Country, model.Email,
                                                model.DayPhone, model.Evening, model.ShipToName, model.ShipAddress,
                                                model.ShipAddress2, model.ShipCity, model.ShipState, model.ShipZip, model.ShipCountry,
                                                model.ShipInstruc, emailoptin, UvUsername, UvPassword,
                                                DbType, UvAddress, UvAccount, CacheTime, CacheTime,
                                                Strd3PortNumber, UseEncryption, Strd3PortNumber);

                if (!string.IsNullOrEmpty(objUserModel.ErrorMsg))
                {
                     ModelState.AddModelError("", objUserModel.ErrorMsg);
                }
                else
                {
                    Session["USERINFO"] = objUserModel;

                    Session["ACCTYPE"] = objUserModel.Type;

                    return RedirectToAction("MyAccount");
                }

            }


            // If we got this far, something failed, redisplay form
            return View(model);
        }

        /// <summary>
        /// To check username is available or not....
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost]
        public JsonResult JsonCheckUserAvailability()
        {
            var username = Convert.ToString(Request["UserName"]);

            var isAvailable = AccountSettingsService.CheckUser(StoreNumber, username, UvUsername,
                                                               UvPassword, DbType, UvAddress, UvAccount,
                                                               CacheTime, CacheTime, Strd3PortNumber, UseEncryption,
                                                               Strd3PortNumber);

            return Json(new {success = isAvailable});
        }

        //
        // GET: /Account/ChangePassword

        public ActionResult ChangePassword()
        {
            return View();
        }

        //
        // POST: /Account/ChangePassword

        [HttpPost]
        public ActionResult ChangePassword(ChangePasswordModel model)
        {
            if (ModelState.IsValid)
            {

                // ChangePassword will throw an exception rather
                // than return false in certain failure scenarios.
                bool changePasswordSucceeded;
                try
                {
                    MembershipUser currentUser = Membership.GetUser(User.Identity.Name, userIsOnline: true);
                    changePasswordSucceeded = currentUser.ChangePassword(model.OldPassword, model.NewPassword);
                }
                catch (Exception)
                {
                    changePasswordSucceeded = false;
                }

                if (changePasswordSucceeded)
                {
                    return RedirectToAction("ChangePasswordSuccess");
                }
                else
                {
                    ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        //
        // GET: /Account/ChangePasswordSuccess

        public ActionResult ChangePasswordSuccess()
        {
            return View();
        }

        private ActionResult ContextDependentView()
        {
            string actionName = ControllerContext.RouteData.GetRequiredString("action");
            if (Request.QueryString["content"] != null)
            {
                ViewBag.FormAction = "Json" + actionName;
                return PartialView();
            }
            else
            {
                ViewBag.FormAction = actionName;
                return View();
            }
        }

        private IEnumerable<string> GetErrorsFromModelState()
        {
            return ModelState.SelectMany(x => x.Value.Errors
                .Select(error => error.ErrorMessage));
        }
        /// <summary>
        /// Get Cehckout
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult CheckOut()
        {
            if (Session["USERINFO"] == null)
            {
                return RedirectToAction("LogOn", new {ReturnUrl = Request.Url.PathAndQuery});
            }
            if (Session["CARTITEMS"] == null)
            {
                return RedirectToAction("Index", "Home");
            }
            if (Session["CARTITEMS"] == null)
            {
                return RedirectToAction("Index", "Home");
            }

            var model = (IEnumerable<ShoppingCartModel>) Session["CARTITEMS"];

            // If we got this far, something failed, redisplay form
            return View(model);
        }
        /// <summary>
        /// Get Sellback Checkout
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult SellBackCheckout()
        {
            //Checking for the authentication
            if (Session["USERINFO"] == null)
            {
                return RedirectToAction("LogOn", new { ReturnUrl = Request.Url.PathAndQuery });
            }
            if (Session["SELLBACKCART"] != null)
            {
                //Get the sell back cart model in to the variable
                var lstSellBackCartItems = (IEnumerable<SellBackCartViewModel>)Session["SELLBACKCART"];

                return View(lstSellBackCartItems);
            }
            return RedirectToAction("Index", "Home");
        }
        /// <summary>
        /// Get Print Voucher
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public ActionResult PrintVoucher()
        {
            try
            {
                //Check for null 
                if (Session["USERINFO"] != null)
                {
                    var printVoucherViewModel = new PrintVoucherViewModel();

                    List<SellBackCartViewModel> lstSellBackCartItems;

                    var userModel = (UserModel)Session["USERINFO"];

                    //Check for sellback book cart model is null
                    if (Session["SELLBACKCART"] != null)
                    {
                        //Get the sell back cart model in to the variable
                        lstSellBackCartItems = (List<SellBackCartViewModel>)Session["SELLBACKCART"];

                        printVoucherViewModel.SellBackModel = lstSellBackCartItems;

                        printVoucherViewModel.UserModel = userModel;

                        @ViewData["VoucherNo"] = "123456789";

                        return View(printVoucherViewModel);
                    }

                    Session["SELLBACKCART"] = null;



                }
                return RedirectToAction("LogOn", new { ReturnUrl = Request.Url.PathAndQuery });

            }
            catch (Exception x)
            {

                ModelState.AddModelError("", x.Message);

            }

            return View();
        }

        #region Status Codes
        private static string ErrorCodeToString(MembershipCreateStatus createStatus)
        {
            // See http://go.microsoft.com/fwlink/?LinkID=177550 for
            // a full list of status codes.
            switch (createStatus)
            {
                case MembershipCreateStatus.DuplicateUserName:
                    return "User name already exists. Please enter a different user name.";

                case MembershipCreateStatus.DuplicateEmail:
                    return "A user name for that e-mail address already exists. Please enter a different e-mail address.";

                case MembershipCreateStatus.InvalidPassword:
                    return "The password provided is invalid. Please enter a valid password value.";

                case MembershipCreateStatus.InvalidEmail:
                    return "The e-mail address provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidAnswer:
                    return "The password retrieval answer provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidQuestion:
                    return "The password retrieval question provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidUserName:
                    return "The user name provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.ProviderError:
                    return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                case MembershipCreateStatus.UserRejected:
                    return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                default:
                    return "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
            }
        }
        #endregion
    }
}
